from pymongo import MongoClient
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.vectorstores.mongodb_atlas import MongoDBAtlasVectorSearch
from langchain.document_loaders.directory import DirectoryLoader
from langchain.llms.openai import OpenAI
from langchain.chains.retrieval_qa.base import RetrievalQA
import gradio as gr
from gradio.themes.base import Base
import key_param

client = MongoClient(key_param.mongo_url)
dbName = "langchain_demo"
collectionName = "collection_of_text_blobs"
collection = client[dbName][collectionName]

embeddings = OpenAIEmbeddings(api_key=key_param.openai_key)
vectorStore = MongoDBAtlasVectorSearch(collection, embeddings)

def query_data(query):
    docs = vectorStore.similarity_search(query, k=1)
    as_output = docs[0].page_content

    llm = OpenAI(api_key=key_param.openai_key, temperature=0)
    retriever = vectorStore.as_retriever()
    qa = RetrievalQA.from_chain_type(llm, chain_type="stuff", retriever=retriever)
    retriever_output=qa.run(query)

    return as_output, retriever_output

with gr.Blocks(theme=Base(), title="Question Answering App using Vector Search + RAG") as demo:
    gr.Markdown(
        """
        # Question Answering App using Atlas Vector Search + RAG Architecture
        """
    )
    textbox = gr.Textbox(label="Enter your question")
    with gr.Row():
        button = gr.Button("Submit", variant="primary") 
    with gr.Column():
        output1 = gr.Textbox(lines=1, max_lines=10, label="Output with Atlas Vector Search:")
        output2 = gr.Textbox(lines=1, max_lines=10, label="Output generated by chaining Atlas Vector Search to Langchain retrieval + OpenAILLM:")

    button.click(query_data, textbox, outputs=[output1, output2])

demo.launch()